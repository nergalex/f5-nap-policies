openapi: 3.0.1
info:
  title: generator
  description: list of attributes
  version: '0.1'
#servers:
#  - url: 'http://gw_attributes:8080'
paths:
  /_codexch:
    get:
      description: OpenID Connect authentication - code exchange
      operationId: codeExchange
      tags:
        - oidc
      parameters:
        - name: code
          in: path
          description: authorization code
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: state
          in: path
          description: anti replay
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '302':
          description: sends redirect to original uri
  /logout:
    get:
      description: OpenID Connect authentication - logout
      operationId: logout
      tags:
        - oidc
      responses:
        '200':
          description: sends redirect to original uri
  /:
    get:
      description: generate composed name
      operationId: generateName
      tags:
        - generator
      responses:
        '200':
          description: a randomly composed name
      servers:
        - url: 'http://generator:80'
#  /name:
#    get:
#      description: generate composed name for FrontEnd App
#      operationId: generateName
#      tags:
#        - generator
#      responses:
#        '200':
#          description: a randomly composed name
#      servers:
#        - url: 'http://generator:80'
  /colors:
    get:
      description: List all colors
      operationId: listColors
      tags:
        - colors
      responses:
        '200':
          description: a list of colors with their index
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Colors"
              #examples: {"adjectives": [{"id":1,"name":"blue"}]}
      servers:
        - url: 'http://colors:8080'
    post:
      description: create a color
      operationId: createColor
      tags:
        - colors
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                id:
                  type: integer
            examples:
              '0':
                value: '{"name":"yellow"}'
              '1':
                value: '{"id":4}'
      responses:
        '201':
          description: color created
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
      servers:
        - url: 'http://colors:8080'
    delete:
      description: delete a color
      operationId: deleteColor
      tags:
        - colors
      responses:
        '404':
          description: Auto generated using Swagger Inspector
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
      servers:
        - url: 'http://colors:8080'
    servers:
      - url: 'http://colors:8080'
  /colors/{id}:
    get:
      description: get a specific color
      operationId: showColorById
      tags:
        - colors
      parameters:
        - name: id
          in: path
          required: true
          description: id of the color to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Color"
              # examples: {"adjectives": [{"id":1,"name":"blue"}]}
      servers:
        - url: 'http://colors:8080'
  /adjectives:
    get:
      description: List all adjectives
      operationId: listAdjectives
      tags:
        - adjectives
      responses:
        '200':
          description: a list of adjectives with their index
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Adjectives"
              #examples: {"adjectives": [{"id":1,"name":"blue"}]}
      servers:
        - url: 'http://adjectives:8080'
    post:
      description: create an adjective
      operationId: createAdjective
      tags:
        - adjectives
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                id:
                  type: integer
            examples:
              '0':
                value: '{"name":"calm"}'
              '1':
                value: '{"id":2}'
      responses:
        '201':
          description: adjective created
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
      servers:
        - url: 'http://adjectives:8080'
    delete:
      description: delete an adjective
      operationId: deleteAdjective
      tags:
        - adjectives
      responses:
        '404':
          description: Delete an Adjective
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
      servers:
        - url: 'http://adjectives:8080'
    servers:
      - url: 'http://adjectives:8080'
  /adjectives/{id}:
    get:
      description: get a specific adjective
      operationId: showAdjectiveById
      tags:
        - adjectives
      parameters:
        - name: id
          in: path
          required: true
          description: id of the adjective to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Color"
              # examples: {"adjectives": [{"id":1,"name":"blue"}]}
      servers:
        - url: 'http://adjectives:8080'
  /animals:
    get:
      description: List all animals
      operationId: listAnimals
      tags:
        - animals
      responses:
        '200':
          description: a list of animals with their index
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Animals"
              #examples: {"animals": [{"id":1,"name":"lion"}]}
      servers:
        - url: 'http://animals:8080'
    post:
      description: create an animal
      operationId: createAnimal
      tags:
        - animals
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                id:
                  type: integer
            examples:
              '0':
                value: '{"name":"cat"}'
              '1':
                value: '{"id":2}'
      responses:
        '201':
          description: animal created
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
      servers:
        - url: 'http://animals:8080'
    delete:
      description: delete an adjective
      operationId: deleteAnimal
      tags:
        - adjectives
      responses:
        '404':
          description: Delete an Adjective
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
      servers:
        - url: 'http://animals:8080'
    servers:
      - url: 'http://animals:8080'
  /animals/{id}:
    get:
      description: get a specific adjective
      operationId: showAnimalsById
      tags:
        - animals
      parameters:
        - name: id
          in: path
          required: true
          description: id of the animal to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Animal"
              # examples: {"adjectives": [{"id":1,"name":"lion"}]}
      servers:
        - url: 'http://animals:8080'
  /locations:
    get:
      description: List all locations
      operationId: listlocations
      tags:
        - locations
      responses:
        '200':
          description: a list of locations with their index
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Locations"
              #examples: {"animals": [{"id":1,"name":"mountain"}]}
      servers:
        - url: 'http://locations:8080'
    post:
      description: create an location
      operationId: createLocation
      tags:
        - locations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                id:
                  type: integer
            examples:
              '0':
                value: '{"name":"lake"}'
              '1':
                value: '{"id":2}'
      responses:
        '201':
          description: location created
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
      servers:
        - url: 'http://locations:8080'
    delete:
      description: delete a location
      operationId: deleteLocation
      tags:
        - locations
      responses:
        '404':
          description: Delete a Location
          content:
            application/json; charset=utf-8:
              schema:
                type: string
              examples: {}
      servers:
        - url: 'http://locations:8080'
    servers:
      - url: 'http://locations:8080'
  /locations/{id}:
    get:
      description: get a specific location
      operationId: showLocationById
      tags:
        - locations
      parameters:
        - name: id
          in: path
          required: true
          description: id of the location to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successful
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Location"
              # examples: {"locations": [{"id":1,"name":"mountain"}]}
      servers:
        - url: 'http://locations:8080'
components:
  schemas:
    Color:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Colors:
      type: array
      items:
        $ref: "#/components/schemas/Color"
    Adjective:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
  #      tag:
  #        type: string
    Adjectives:
      type: array
      items:
        $ref: "#/components/schemas/Adjective"
    Animal:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
  #      tag:
  #        type: string
    Animals:
      type: array
      items:
        $ref: "#/components/schemas/Animal"
    Location:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
  #      tag:
  #        type: string
    Locations:
      type: array
      items:
        $ref: "#/components/schemas/Location"
